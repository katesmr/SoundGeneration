var AudioHelper = require("../utils/AudioHelper");
var DrumRecorder = require("./DrumRecorder");
var PlayerRecorder = require("./PlayerRecorder");

module.exports = BaseDrumModel;

function BaseDrumModel(setting, playSetting){
    this.instrument = null;
    this.setting = setting || {};
    this.playSetting = playSetting || [];
    this.playObjects = [];
    this.playValue = null;
    //this.createPlayObjects();
    this.setInstrument();
    this.setSetting();
    this.trackObject = this._generate();
}

BaseDrumModel.prototype._generate = null;

BaseDrumModel.prototype.setSetting = null;

BaseDrumModel.prototype.setInstrument = null;

BaseDrumModel.prototype.getVolume = function(){
    return this.trackObject ? this.trackObject.volume.value : null;
};

BaseDrumModel.prototype.setVolume = function(value){
    this.trackObject.volume.value = value;
};

BaseDrumModel.prototype.emptyPlaySetting = function(){
    this.playSetting.length = 0;
    this.playObjects.length = 0;
};

BaseDrumModel.prototype.clearObject = function(){
    this.trackObject = null;
};

BaseDrumModel.prototype.getContext = function(){
    return this.trackObject.context._context;
};

BaseDrumModel.prototype.getConstants = function(){
    return this.trackObject.context;
};

BaseDrumModel.prototype.getAudioBuffer = function(){
    return AudioHelper.getAudioContextBuffer(this.getConstants());
};

BaseDrumModel.prototype.play = function(){
    var i;
    for(i =0; i < this.playObjects.length; ++i){
        this.playObjects[i].play(this.trackObject);
    }
};

BaseDrumModel.prototype.playNow = function(){
    this.trackObject.triggerAttack(this.playValue);
};

BaseDrumModel.prototype.playAll = function(){
    var token;
    for(token in this.playSetting){
        this.play(this.playSetting[token].playValue, this.playSetting[token].startTime);
    }
};

BaseDrumModel.prototype.stop = null;

/*BaseDrumModel.prototype.createPlayObject = function(value, time){
    var recorder;
    if(value.instrument === "snare" || value.instrument === "hi-hat"){
        recorder = new PlayerRecorder(value.instrument, time);
    } else{
        recorder = new DrumRecorder(value.instrument, value.playValue, time);
    }
    this.playObjects.push(recorder);
};

BaseDrumModel.prototype.createPlayObjects = function(){
    var i, tokenPlaySetting;
    for(i = 0; i < this.playSetting.length; ++i){
        tokenPlaySetting = this.playSetting[i];
        this.createPlayObject(tokenPlaySetting, tokenPlaySetting.startTime);
    }
};*/
