var capitalize = require("../utils/capitalize");
var TrackSynthesizer = require("./TrackSynthesizer");

module.exports = {
    "updateSettingListFromTrack": function(settingList, track){ // SettingList OR FilterList
        updateList(settingList, track, setToSettingList)
    },
    "updateFilterListFromFilter": function(filterList, filter){
        updateList(filterList, filter, setToFilterList);
    },
    "setSetting": function(list, track, settingName, value){
        setToTrackSetting(track, settingName, value);
        setToSettingList(list, track, settingName);
    },
    "setFilter": function(filterList, filter, filterName, value){
        setOptionToFilterList(filterList, filter, filterName, value);
    },
    "addFilter": function(filterList, filter, filterName, isEnabled){
        addFilter(filterList, filter, filterName, isEnabled);
    },
    "resetFilter": function(filterList, filterName){
        resetFilter(filterList, filterName);
    },
    "resetFilters": function(filterList){
        setFilterListToDefault(filterList);
    },
    "resetSettings": function(settingList){
        setSettingListToDefault(settingList);
    }
};

/**
 * Set data from BaseTrackModel/PostSettings to corresponding list
 * @param listInstance - TrackSettingsSet - SettingList OR FilterList
 * @param dataObject
 * @param callback
 */
function updateList(listInstance, dataObject, callback){
    var i;
    var name;
    var tokenSetting;
    var list = listInstance.list;
    for(i = 0; i < list.length; ++i) {
        tokenSetting = list[i]; // BaseTrackSetting type
        name = tokenSetting.name;
        callback(tokenSetting, dataObject, name);
    }
}

/**
 * Set all parameters from FilterObject to FilterList
 * @param filterElement - BaseTrackSetting
 * @param options - object
 */
function setFilterOptionsToFilterList(filterElement, options){
    var optionName;
    for(optionName in options){
        filterElement.isEnabled = true; // switch flag for using this filter
        filterElement.options[optionName].set(options[optionName]);
    }
}

/**
 * Get data from filter object and put them to FilterList
 * @param listElement
 * @param filterObject
 * @param filterName
 */
function setToFilterList(listElement, filterObject, filterName){
    setFilterOptionsToFilterList(listElement, filterObject[filterName]);
}

/**
 * Set one option in filter options
 * @param filterList - TrackSettingsSet
 * @param filterObject - PostSettings
 * @param optionName
 * @param value
 */
function setOptionToFilterList(filterList, filterObject, optionName, value){
    var i;
    var tokenFilter;
    var list = filterList.list;
    for(i = 0; i < list.length; ++i){
        tokenFilter = list[i];
        if(optionName in tokenFilter.options){
            tokenFilter.options[optionName].set(value);
            filterObject.setValueToFilter(tokenFilter.name, optionName, value);
        }
    }
}

/**
 * Put all settings from FilterList to FilterObject
 * @param filterList - TrackSettingsSet
 * @param filterObject - PostSettings
 * @param filterName
 * @param isEnabled
 */
function addFilter(filterList, filterObject, filterName, isEnabled){
    var i;
    var tokenFilter;
    var list = filterList.list;
    for(i = 0; i < list.length; ++i){
        tokenFilter = list[i];
        if(tokenFilter.name === filterName){
            tokenFilter.isEnabled = isEnabled;
            filterObject.setFilter(tokenFilter);
        }
    }
}

function setFilterListToDefault(filterList) {
    var i;
    var option;
    var options;
    var tokenFilter;
    var list = filterList.list;
    for (i = 0; i < list.length; ++i) {
        tokenFilter = list[i];
        tokenFilter.isEnabled = false;
        options = tokenFilter.options;
        for(option in options){
            //options[option].value = options[option].__initialValue;
            options[option].reset();
        }
    }
}

function resetFilter(filterList, filterName){
    var i;
    var option;
    var options;
    var tokenFilter;
    var list = filterList.list;
    for (i = 0; i < list.length; ++i) {
        tokenFilter = list[i];
        if(tokenFilter.name === filterName) {
            tokenFilter.isEnabled = false;
            options = tokenFilter.options;
            for(option in options){
                //options[option].value = options[option].__initialValue;
                options[option].reset();
                console.log(options);
            }
        }
    }
}

function setSettingListToDefault(settingList) {
    var i;
    var tokenFilter;
    var list = settingList.list;
    for (i = 0; i < list.length; ++i) {
        tokenFilter = list[i];
        tokenFilter.isEnabled = false;
        tokenFilter.reset();
    }
}

/**
 * Get data from track object and put them to SettingList
 * @param listElement
 * @param trackObject
 * @param optionName
 */
function setToSettingList(listElement, trackObject, optionName){
    var result;
    var methodName = "get" + capitalize(optionName);
    if (methodName in trackObject){
        listElement.isEnabled = true;
        result = trackObject[methodName]();
        // add only existing methods/parameters from track to SettingList
        if (result !== undefined || result !== null){
            listElement.set(trackObject[methodName]());
            hideExistingParams(listElement, trackObject.instrument);
        }
    }
}

function setToTrackSetting(track, settingName, value){
    var methodName = "set" + capitalize(settingName);
    track[methodName](value);
    track.setSetting(); // write to model parameter for saving to server
}

/**
 * Hide existing parameters in SettingList
 */
function hideExistingParams(listElement, instrumentName){
    switch(instrumentName){
        case "drum":
            if(listElement.name === "frequency" || listElement.name === "type"){
                listElement.isEnabled = false;
            }
            break;
        case "oscillator":
            if(listElement.name === "frequency" || listElement.name === "volume"){
                listElement.isEnabled = false;
            }
            break;
        case "noise":
            break;
    }
}
