var BaseTrackModel = require("./BaseTrackModel");
var DrumRecorder = require("./DrumRecorder");
var PlayerRecorder = require("./PlayerRecorder");
var inherit = require("../utils/inherit");
var KickLeft = require("./KickLeft");
var KickRight = require("./KickRight");
var BigTom = require("./BigTom");
var LeftTom = require("./LeftTom");
var Bell = require("./Bell");
var SnarePlayer = require("./SnarePlayer");
var HiHatPlayer = require("./HiHatPlayer");

module.exports = TrackDrum;  // FIXME !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

function TrackDrum(id, data){
    BaseTrackModel.call(this, id, data);
    this.drums = data.drums || []; // list of names of used drums
    this.drumObjects = {}; // only used drum
    this.allDrumObjects = {}; // instances of all possible drum objects
    this.volume = data.volume || 1;
    this.createAllDrumObjects();
    this.createDrumObjects();
}

inherit(TrackDrum, BaseTrackModel);

TrackDrum.prototype._generate = function(){};

TrackDrum.prototype.getContext = function(){};

TrackDrum.prototype.getConstants = function(){};

TrackDrum.prototype.getAudioBuffer = function(){};

TrackDrum.prototype.getBlob = function(){};

TrackDrum.prototype.disconnectFromAudioSource = function(){};

TrackDrum.prototype.getVolume = function(){
    return this.volume;
};

TrackDrum.prototype.setVolume = function(value){
    var name;
    this.volume = value;
    for(name in this.allDrumObjects){
        this.allDrumObjects[name].setVolume(value);
    }
};

TrackDrum.prototype.getData = function(){
    var result = {};
    result.id = this.id;
    result.isDeleted = this.isDeleted;
    result.instrument = this.instrument;
    result["drums"] = this.drums;
    result["play-setting"] = this.playSetting;
    result["post-setting"] = this.postSettings.getPostSettings();
    return result;
};

/**
 * Add new drum
 * @param drumName
 */
TrackDrum.prototype.addDrum = function(drumName){
    if(this.drums.indexOf(drumName) === -1){
        // get reference to drum object
        this.drumObjects[drumName] = this.allDrumObjects[drumName];
        this.drums.push(drumName);
    }
};

/**
 * Put used drum sound object in this.drumObjects if them exist
 */
TrackDrum.prototype.createDrumObjects = function(){
    var drumName;
    for(drumName in this.allDrumObjects){
        if(this.drums.indexOf(drumName) !== -1){
            // get reference to drum object
            this.drumObjects[drumName] = this.allDrumObjects[drumName];
        }
    }
};

TrackDrum.prototype.play = function(){
    var i, token;
    for(i = 0; i < this.playObjects.length; ++i){
        token = this.playObjects[i];
        token.play(this.drumObjects[token.instrument].trackObject);
    }
};

TrackDrum.prototype.stop = function(){
    var drum;
    for(drum in this.drumObjects){
        this.drumObjects[drum].stop();
    }
};

TrackDrum.prototype.createPlayObject = function(value, time){
    var recorder;
    if(value.instrument === "snare" || value.instrument === "hi-hat"){
        recorder = new PlayerRecorder(value.instrument, time);
    } else{
        recorder = new DrumRecorder(value.instrument, value.playValue, time);
    }
    this.playObjects.push(recorder);
};

TrackDrum.prototype.createPlayObjects = function(){
    var i, tokenPlaySetting;
    for(i = 0; i < this.playSetting.length; ++i){
        tokenPlaySetting = this.playSetting[i];
        this.createPlayObject(tokenPlaySetting, tokenPlaySetting.startTime);
    }
};


/*TrackDrum.prototype.createPlayObjects = function(){
    var i, token;
    for(i = 0; i < this.playSetting.length; ++i){
        token = this.playSetting[i];
        this.playObjects.push(new DrumRecorder(token.instrument, token.playValue, token.startTime));
    }
};*/

/**
 * Apply filter for each drum object
 * @param filter
 */
TrackDrum.prototype.applyFilter = function(filter){
    var drum;
    for(drum in this.allDrumObjects){
        filter.applyToTrack(this.allDrumObjects[drum].trackObject);
    }
};

/**
 * Remove filter from each drum object
 * @param filter
 */
TrackDrum.prototype.removeFilter = function(filter){
    var drum;
    for(drum in this.allDrumObjects){
        filter.disconnectFilter(this.allDrumObjects[drum].trackObject);
    }
};

TrackDrum.prototype.merge = function(){
    // merge this.object !!!!!!!
};

TrackDrum.prototype.clearObject = function(){
    var drum;
    for(drum in this.allDrumObjects){
        this.allDrumObjects[drum].clearObject();
    }
};

TrackDrum.prototype.emptyPlaySetting = function(){
    this.playSetting.length = 0;
    this.playObjects.length = 0;
    this.drums.length = 0;
};

/**
 * Init all drum sound objects
 */
TrackDrum.prototype.createAllDrumObjects = function(){
    this.allDrumObjects["kick-left"] = new KickLeft();
    this.allDrumObjects["kick-right"] = new KickRight();
    this.allDrumObjects["big-tom"] = new BigTom();
    this.allDrumObjects["left-tom"] = new LeftTom();
    this.allDrumObjects["bell"] = new Bell();
    this.allDrumObjects["snare"] = new SnarePlayer();
    this.allDrumObjects["hi-hat"] = new HiHatPlayer();
};
