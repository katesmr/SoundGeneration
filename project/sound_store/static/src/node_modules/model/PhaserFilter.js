//PhaserFilter

var inherit = require("../utils/inherit");
var BaseFilterModel = require("./BaseFilterModel");

module.exports = PhaserFilter;

function PhaserFilter(options){
    BaseFilterModel.call(this, options);
}

inherit(PhaserFilter, BaseFilterModel);

PhaserFilter.prototype.generate = function(){
    this.filter = new Tone.Phaser(this.options);
};

PhaserFilter.prototype.getFrequency = function(){
    return this.filter.frequency.value;
};

PhaserFilter.prototype.getOctaves = function(){
    return this.filter.octaves.value;
};

PhaserFilter.prototype.getWet = function(){
    return this.filter.wet.value;
};

PhaserFilter.prototype.getOptions = function(){
    return this.options;
};

PhaserFilter.prototype.setFrequency = function(value){
    this.options.frequency = value;
    this.filter.frequency.value = value;
};

PhaserFilter.prototype.setOctaves = function(value){
    this.options.octaves = value;
    this.filter.octaves.value = value;
};

PhaserFilter.prototype.setWet = function(value){
    this.options.wet = value;
    this.filter.wet.value = value;
};

PhaserFilter.prototype.setOptions = function(options){
    this.setFrequency(options.frequency);
    this.setOctaves(options.octaves);
    this.setWet(options.wet);
};

PhaserFilter.prototype.setByName = function(optionName, value){
    switch(optionName){
        case "frequency":
            this.setFrequency(value);
            break;
        case "octaves":
            this.getOctaves(value);
            break;
    }
};

