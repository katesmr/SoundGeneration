var inherit = require("../utils/inherit");
var WaveForm = require("./WaveForm");
var BaseWindow = require("./BaseWindow");
var FilterView = require("./FilterView");
var SettingView = require("./SettingView");
var InstrumentView = require("./InstrumentView");
var commonEventNames = require("../core/commonEventNames");
var windowsTransport = require("./windowsTransport");

var AudioBufferRecorder = require("../model/AudioBufferRecorder");
var DrumAudioBufferRecorder = require("../model/DrumAudioBufferRecorder");
var TrackDrum = require("../model/TrackDrum");
var TrackManager = require("../utils/TrackManager");

module.exports = TrackView;

function TrackView(controller){
    BaseWindow.call(this, controller, "track-view");

    this.title = "";

    this.waveform = new WaveForm();
    this.tabBlock = $("<div class='ui top attached tabular menu'>");

    this.tools = $("<div class='ui stackable two column grid tools'>");

    this.settingTabSegment = new SettingView(null);
    this.filterTabSegment = new FilterView(null);

    this.settingTitle = $("<a class='item' data-tab='" + this.settingTabSegment.dataTab + "'>settings</a>");
    this.filterTitle = $("<a class='item' data-tab='" + this.filterTabSegment.dataTab + "'>filters</a>");

    this.instrumentView = new InstrumentView();

    this.recorder = null;

    this._build();
    this.hide();
    this.showTabMenu();
}

inherit(TrackView, BaseWindow);

TrackView.prototype._build = function(){
    var self = this;
    var container = this.getContainer();

    this.setActiveSettingView();

    this.controller.observer.subscribe(commonEventNames.E_SET_TRACK, setTrack.bind(this));

    windowsTransport.subscribe(commonEventNames.E_EXPORT_TRACK, function(){
        console.log("export track");
        console.log(self.controller.model);
        self.createRecord(TrackManager.save);
    });

    windowsTransport.subscribe(commonEventNames.E_UPDATE_WAVE, function(){
        console.log("update wave");
        self.waveform.wavesurfer = null;
        self.waveform.getContainer().empty();
        self.createRecord(self.waveform.create.bind(self.waveform));
    });

    this.createView();
};

TrackView.prototype.createRecord = function(callback){
    if(this.controller.model instanceof TrackDrum){
        console.log("???????????????????");
        this.recorder = new DrumAudioBufferRecorder();
    } else{
        this.recorder = new AudioBufferRecorder();
    }
    this.recorder.setModel(this.controller.model);
    this.recorder.record(callback);
};

TrackView.prototype.createView = function(){
    var halfWidth = ($(window).width() / 2) - 120;
    var instrumentColumn = $("<div class='column instrument'>");
    var toolColumn = $("<div class='column tool'>");
    instrumentColumn.css("min-width", halfWidth);
    toolColumn.css("min-width", halfWidth);
    instrumentColumn.append(this.waveform.getContainer());
    instrumentColumn.append(this.instrumentView.getContainer());
    this.tabBlock.append(this.settingTitle);
    this.tabBlock.append(this.filterTitle);
    toolColumn.append(this.tabBlock);
    toolColumn.append(this.settingTabSegment.getContainer());
    toolColumn.append(this.filterTabSegment.getContainer());
    this.tools.append(instrumentColumn);
    this.tools.append(toolColumn);
    this.getContainer().append(this.tools);
};

TrackView.prototype.showTabMenu = function(){
    $(document).ready(function(){
        $('.tabular.menu .item').tab({history:false});
    });
};

TrackView.prototype.setActiveSettingView = function(){
    this.settingTabSegment.setActive();
    this.settingTitle.addClass("active");
};

TrackView.prototype.setActiveFilterView = function(){
    this.filterTabSegment.setActive();
    this.filterTitle.addClass("active");
};

TrackView.prototype.back = function(){
    this.settingTabSegment.table.empty();
    this.filterTabSegment.table.empty();
    this.waveform.getContainer().empty();
    windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "trackList");
    this.settingTabSegment.resetToolOptions(); // reset previous setting of track
    this.filterTabSegment.resetToolOptions(); // reset previous filter of track
    // save playing setting
    this.instrumentView.track.setPlaySettings();
    this.instrumentView.instrument.getContainer().empty();
    this.instrumentView.getContainer().empty();

    this.instrumentView.track = null;
    this.recorder = null;
    this.waveform.wavesurfer = null;
};

TrackView.prototype.bindKeyEvent = function(){
    this.instrumentView.instrument.keyDown();
    this.instrumentView.instrument.keyUp();
};

function setTrack(eventName, track){
    this.settingTabSegment.setTrack(track);
    this.filterTabSegment.setFilter(track);
    this.instrumentView.setTrack(track);

    if(track.id > 0){
        // draw waveform only for fulled track
        // new track (it's id < 0) always empty
        if (track instanceof TrackDrum) {
            this.recorder = new DrumAudioBufferRecorder();
        } else {
            this.recorder = new AudioBufferRecorder();
        }
        console.log();
        this.recorder.setModel(track);
        this.recorder.record(this.waveform.create.bind(this.waveform));
    }
}
