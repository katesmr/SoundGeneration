var inherit = require("../utils/inherit");
var ToolView = require("./ToolView");
var FiltersList = require("../model/FiltersList");
var ProxyTrackManager = require("../model/ProxyTrackManager");
var Factory = require("./Factory");

module.exports = FilterView;

function FilterView(track){
    ToolView.call(this, "filter-view", "two column stackable ui grid filter");

    this.track = null;
    this.filter = null;

    this.setFilter(track);

    this._build();
    this.show();
}

inherit(FilterView, ToolView);

FilterView.prototype.resetToolOptions = function(){
    ProxyTrackManager.resetFilters(FiltersList);
};

FilterView.prototype.setFilter = function(track){
    if(track){
        this.track = track;
        this.filter = track.postSettings;
        // set filters settings from sound for to view on form
        ProxyTrackManager.updateFilterListFromFilter(FiltersList, this.filter.getPostSettings());
        this.createFilterColumns();
    }
};

FilterView.prototype.setEvent = function(optionName, value){
    ProxyTrackManager.setFilter(FiltersList, this.filter, optionName, value);
};

/**
 * Full div with filter setting of rangeElement || dropDownElement
 */
FilterView.prototype.createFilterSettingElements = function(mainBlock, options){
    var value;
    var optionName;
    var $element;
    var $elementName;
    for(optionName in options){
        value = options[optionName]; // BaseOption
        $elementName = $("<label>" + optionName + "</label>");
        $element = this.createElement(optionName, optionName, value);
        mainBlock.append($elementName);
        mainBlock.append($element);
    }
};

/**
 * Create block (one column) with some filters
 * @param count
 * @param startValue
 * @returns {*|jQuery|HTMLElement}
 */
FilterView.prototype.createFilterTools = function(count, startValue){
    var i = startValue || 0;
    var options;
    var filterName;
    var tokenFilter;
    var $mainDiv;
    var $checkBox;
    var $settingDiv;
    var $result = $("<div class='column'>");
    for(i; i < count; ++i){
        tokenFilter = FiltersList.list[i];
        options = tokenFilter.options;
        filterName = tokenFilter.name;
        // create main div for checkbox component and div with settings
        $mainDiv = $("<div class='item-" + filterName + "'>");
        $settingDiv = $("<div class='filter-setting-" + filterName + "'>");
        // create widgets for settings
        this.createFilterSettingElements($settingDiv, options);
        if(tokenFilter.isEnabled === true){
            $settingDiv.show();
            // apply filter to sound right away
            this.filter.setToTrack(filterName, this.track);
        } else {
            $settingDiv.hide();
        }
        $checkBox = Factory.createCheckBox(filterName, filterName, filterName, checkEvent.bind(this),
                                           uncheckEvent.bind(this), tokenFilter.isEnabled);
        $mainDiv.append($checkBox);
        $mainDiv.append($settingDiv);
        $result.append($mainDiv);
    }
    return $result;
};

/**
 * Create table with two columns.
 * Each columns contain div with filter settings elements
 */
FilterView.prototype.createFilterColumns = function(){
    var $column1;
    var $column2;
    var elCountFirstCol = Math.ceil(FiltersList.list.length / 2);
    $column1 = this.createFilterTools(elCountFirstCol);
    $column2 = this.createFilterTools(FiltersList.list.length, elCountFirstCol);
    this.table.append($column1);
    this.table.append($column2);
};

/**
 * Show and apply filter to view and to track
 * @param filterName
 * @param isChecked
 */
function checkEvent(filterName, isChecked){
    this.table.find(".filter-setting-" + filterName).show();
    ProxyTrackManager.addFilter(FiltersList, this.filter, filterName, isChecked);
    // apply filter to sound
    this.filter.setToTrack(filterName, this.track);
}

/**
 * Hide and disconnect filter from view and track
 * @param filterName
 * @param isChecked
 */
function uncheckEvent(filterName, isChecked){
    // delete filter from sound
    this.filter.removeFromTrack(filterName, this.track);
    this.table.find(".filter-setting-" + filterName).hide();
    // transfer disabled filter for to delete it from PostSettings and track
    ProxyTrackManager.addFilter(FiltersList, this.filter, filterName, isChecked);
    ProxyTrackManager.resetFilter(FiltersList, filterName); // ???
}
