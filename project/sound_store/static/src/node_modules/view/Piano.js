var inherit = require("../utils/inherit");
var PianoKeyRecorder = require("../model/PianoKeyRecorder");
var BaseInstrument = require("./BaseInstrument");
var PianoModel = require("../model/PianoModel");
var Factory = require("./Factory");

module.exports = Piano;

function Piano(track){
    BaseInstrument.call(this, track, "piano");

    this.isMouseClicked = false;

    this.__pressedKeys = [];
    //this.__movedKeys = [];
    //this.__recordedKeys = [];

    this.piano = $("<div class='keys'>");
    this.octaveDiv = $("<div class='octaves'>");
    this.label = $("<div class='octave-label'>Octaves</div>");
    this.octaveRange = Factory.dropDownElement("octave-range", "octave-range", {" 1 - 3 ": 0, " 4 - 6 ": 1},
                                                this._dropDownEvent.bind(this));
    this._build();
}

inherit(Piano, BaseInstrument);

Piano.prototype._build = function(){
    var self = this;
    var container = this.getContainer();
    this.createKeys();

    /*this.piano.mouseup(function(event){
        self.isMouseClicked = false;
    });*/

    /*this.replayButton.on("click", function(){
        var i;
        console.log(self.__recordedKeys);
        for (i = 0; i < self.__recordedKeys.length; ++i){
            self.__recordedKeys[i].play();
        }
    });*/

    container.append(this.piano);
    this.octaveDiv.append(this.label);
    this.octaveDiv.append(this.octaveRange);
    container.append(this.octaveDiv);
};

Piano.prototype._dropDownEvent = function(id, text, dataValue){
    PianoModel.shift(dataValue); // change keys notation
    this.createKeys();
};

Piano.prototype.createKeys = function(){
    var i, tokenNote, style, key;
    var notes = PianoModel.notes;
    var keyDistance = 40;
    var whiteKeyDistance = -40;
    var blackKeyDistance = -15;
    this.piano.empty(); // clear previous piano keys
    for (i = 0; i < notes.length; ++i){
        tokenNote = notes[i];
        key = PianoModel.keyList[i];
        if(tokenNote.isBlack() === true){
            style = "background-color: rgb(32,32,32); width: 30px; height: 120px; z-index: 1; color: #ffffff;";
            this.piano.append(Factory.createKey("key", key, "left: " + blackKeyDistance + "; " + style,
                                                key, tokenNote.value, this._keyDownHandler.bind(this),
                                                this._keyUpHandler.bind(this)));
        } else{
            whiteKeyDistance += keyDistance;
            blackKeyDistance += keyDistance;
            this.piano.append(Factory.createKey("key", key, "left: " + whiteKeyDistance + ";", key,
                                                tokenNote.value, this._keyDownHandler.bind(this),
                                                this._keyUpHandler.bind(this)));
        }
        //container.append(Factory.createKey(tokenNote.value, tokenNote.isBlack()));
    }
};

Piano.prototype._recordAttackHandler = function(note){
    if(this.track.playObjects.length === 0){
        // this is the first button pressed, so it's time to remember the start time!
        this.startTime = Date.now();
        this.track.playObjects.push(new PianoKeyRecorder(this.track.trackObject, note, 0));
    } else{
        // it is not first key press, so just record the difference between start moment and present:
        this.track.playObjects.push(new PianoKeyRecorder(this.track.trackObject, note, Date.now()-this.startTime));
    }
};

Piano.prototype._recordReleaseHandler = function(note){
    var i, tokenPlayObject;
    for (i = 0; i < this.track.playObjects.length; ++i){
        tokenPlayObject = this.track.playObjects[i];
        if(tokenPlayObject.note === note && tokenPlayObject.triggerReleaseTime === 0){
            // If current recItem has same note and has default releaseTime - so this is what we need:
            tokenPlayObject.triggerReleaseTime = Date.now() - this.startTime;
        }
    }
};

Piano.prototype._keyDownHandler = function(key){
    var note = PianoModel.getNoteForKey(key);
    if(note !== null){
        if(this.__pressedKeys.indexOf(key) === -1){
            // play pressed key once
            this.__pressedKeys.push(key);
            Factory.setColorToKey(this.piano, key, "grey");
            if(this.track){
                this.track.playKeyNow(note.getValue());
                if(this.isRecordNow === true){
                    this._recordAttackHandler(note.getValue());
                }
            }
        }
    }
};

Piano.prototype._keyUpHandler = function(key){
    var note = PianoModel.getNoteForKey(key);
    if(note !== null) {
        if(this.__pressedKeys.indexOf(key) >= 0) {
            // change unpressed key color on default
            if (note.isBlack() === true) {
                Factory.setColorToKey(this.piano, key, "black");
            } else {
                Factory.setColorToKey(this.piano, key, "");
            }
            // stop key playing
            if(this.track){
                this.track.stopKeyNow();
                if(this.isRecordNow === true){
                    this._recordReleaseHandler(note.getValue());
                }
                this.__pressedKeys.splice(this.__pressedKeys.indexOf(key), 1);
            }
        }
    }
};

Piano.prototype.keyDown = function(){
    var key;
    var self = this;
    $(document).keydown(function(event) {
        key = String.fromCharCode(event.keyCode);
        self._keyDownHandler(key);
    });
};

Piano.prototype.keyUp = function(){
    var key;
    var self = this;
    $(document).keyup(function(event) {
        key = String.fromCharCode(event.keyCode);
        self._keyUpHandler(key);
    });
};
