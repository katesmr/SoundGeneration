var inherit = require("../utils/inherit");
var ToolView = require("./ToolView");
var SettingsList = require("../model/SettingsList");
var ProxyTrackManager = require("../model/ProxyTrackManager");

module.exports = SettingView;

/**
 * Simple view with some data/widgets
 * @param track
 * @constructor
 */
function SettingView(track){
    ToolView.call(this, "setting-view", "two column stackable ui grid setting");

    this.track = null;

    this.setTrack(track);

    this._build();
    this.show();
}

inherit(SettingView, ToolView);

SettingView.prototype.resetToolOptions = function(){
    ProxyTrackManager.resetSettings(SettingsList);
};

SettingView.prototype.setTrack = function(track){
    if(track){
        this.track = track;
        ProxyTrackManager.updateSettingListFromTrack(SettingsList, this.track);
        this.createSettingTools(); // OR CREATE UPDATE METHOD FOR rangeElement AND dropDownElement ???
    }
};

SettingView.prototype.createSettingTools = function(){
    var i;
    var value;
    var options;
    var $element;
    var $elementName;
    var tokenSetting;
    var settingName;
    for(i = 0; i < SettingsList.list.length; ++i){
        tokenSetting = SettingsList.list[i];
        if(tokenSetting.isEnabled){
            options = tokenSetting.options;
            value = options.value; // BaseOption
            settingName = tokenSetting.name;
            $elementName = $("<div class='column'>" + settingName + "</div>");
            $element = this.createElement("column", settingName, value);
            this.table.append($elementName);
            this.table.append($element);
        }
    }
};

SettingView.prototype.setEvent = function(optionName, value){
    ProxyTrackManager.setSetting(SettingsList, this.track, optionName, value);
};
